#!/usr/bin/env python
import sys
import time
from subprocess import *
import psutil
import matplotlib.pyplot as plt
import matplotlib.ticker as tkr  
import pandas as pd

def sizeof_fmt(x, pos):
    if x < 0:
        return ""
    for x_unit in ['bytes', 'kB', 'MB', 'GB', 'TB']:
        if x < 1024.0:
            return "%3.1f %s" % (x, x_unit)
        x /= 1024.0

# -f file.txt : output information to a file rather than stderr
# -d          : debug mode, prints the logs in prompt
# -t          : time, prints the exectuion time

out = sys.stderr
FILE = False
DEBUG = False
TIMER = False

vss_peak = -1
rss_peak = -1
exec_count = 0

clock = 0
vss_data = []
rss_data = []
time_data = []
prev_vss = 0
prev_rss = 0

child_args = []
i = 1
while i < len(sys.argv):
    if sys.argv[i] == '-f':
        i += 1
        out = open(sys.argv[i], 'w')
        FILE = True
    elif sys.argv[i] == '-t':
        TIMER = True
    elif sys.argv[i] == '-d':
        DEBUG = True
    else:
        child_args.append(sys.argv[i])
    i += 1

def log(msg):
    if DEBUG:
        print("memTool: {}".format(msg))
    if FILE:
        out.write("memTool: {} \n".format(msg))

program_name = str(child_args[0]).split('/')
log(child_args)

def measure_memory(pid):
    try:
        process = psutil.Process(pid)
        mem_info = process.memory_info()
        log("\n\n ####### Process infos #######")
        log("Process pid is : {}".format(pid))
        log("Process mem is : {}".format(mem_info))
        log("Process command line is : {}".format(process.cmdline()))
        vss = mem_info.vms
        rss = mem_info.rss

        log("\n\n ####### Child infos #######")
        forks = process.children(recursive=True)
        for fork in forks:
                assert fork.pid != fork.ppid()
                fork_mem_info = fork.memory_info()
                log("Child pid is {}".format(fork.pid))
                log("Child mem is {}".format(fork_mem_info))
                log("Child command line is : {}".format(fork.cmdline()))
                vss += fork_mem_info.vms
                rss += fork_mem_info.rss
    
    except psutil.NoSuchProcess:
        log("Process or child process no longer exists (pid={})".format(pid))
        vss, rss = 0, 0

    return vss, rss

log("Starting child: {}".format(child_args))
proc = psutil.Popen(child_args, stdin=None, stdout=None, stderr=None, env=None, shell=True)

if TIMER: 
    start_time = proc.create_time()

while proc.returncode == None:
    current_vss, current_rss = measure_memory(proc.pid)
    vss_peak = max(current_vss, vss_peak)
    rss_peak = max(current_rss, rss_peak)
    log("Waiting for child to exit. VSS Peak={} RSS Peak={} ".format(vss_peak,rss_peak))
    exec_count += 1
    
    if vss_data:
        prev_vss = vss_data[-1]

    if rss_data:
        prev_rss = rss_data[-1]

    vss_data.append(prev_vss)
    vss_data.append(current_vss)

    rss_data.append(prev_rss)
    rss_data.append(current_rss)
    
    clock += abs(current_vss - prev_vss)
    time_data.append(clock)
    time_data.append(clock)
    
    proc.poll()     # Check if child process has finished
    
out.write("memTool: VSS Peak: {:.1f} Mo\n".format(vss_peak / 1000000))
out.write("memTool: RSS Peak: {:.1f} Mo\n".format(rss_peak / 1000000))
out.write("memTool: Number of samples : {} \n".format(exec_count))
if TIMER:
    out.write("memTool: Execution time: {:.1f} s\n".format(time.time() - start_time))

status = proc.returncode
log("Child process returned {}".format(status))

# Graph

df = pd.DataFrame(list(zip(time_data, vss_data, rss_data)), columns=['Time', 'VSS', 'RSS'])

fig, ax = plt.subplots()

ax.plot(df['Time'], df['RSS'], label='RSS', color='tab:orange')
ax.set_xlabel('Temps (en octets/par allocations)')
ax.set_ylabel('Utilisation de la mémoire RSS', color='tab:orange')
ax.tick_params(axis='y', labelcolor='tab:orange')
ax.yaxis.set_major_formatter(tkr.FuncFormatter(sizeof_fmt))

ax1 = ax.twinx()
ax1.plot(df['Time'], df['VSS'], label='VSS', color="tab:blue")
ax1.set_ylabel('Utilisation de la mémoire VSS', color='tab:blue')
ax1.tick_params(axis='y', labelcolor='tab:blue')
ax1.yaxis.set_major_formatter(tkr.FuncFormatter(sizeof_fmt))

lines, labels = ax.get_legend_handles_labels()
lines2, labels2 = ax1.get_legend_handles_labels()
ax1.legend(lines + lines2, labels + labels2, loc=0)

plt.title('memTool : ' + program_name[-1])
plt.show()

sys.exit(status)