#!/usr/bin/env python
import sys
import os
import time
from subprocess import *
import psutil
import matplotlib.pyplot as plt

# -f file.txt : output information to a file rather than stderr
# -d          : debug mode, prints the logs in prompt
# -t          : time, prints the exectuion time

out = sys.stderr
FILE = False
DEBUG = False
TIMER = False

## Parsing args
child_args = []
i = 1
while i < len(sys.argv):
    if sys.argv[i] == '-f':
        i += 1
        out = open(sys.argv[i], 'w')
        FILE = True
    elif sys.argv[i] == '-t':
        TIMER = True
    elif sys.argv[i] == '-d':
        DEBUG = True
    else:
        child_args.append(sys.argv[i])
    i += 1

#child_command = ' '.join(child_args)

def log(msg):
    if DEBUG:
        print("memTool: {}".format(msg))
    if FILE:
        out.write("memTool: {} \n".format(msg))

log(child_args)

#Sampling function using ps
def get_vsize(pid):
    vsize = 0
    proc = Popen(['ps', '-o', 'vsize=', '--pid', str(pid)], stdout=PIPE, stderr=None, shell=False)
    (stdout, _stderr) = proc.communicate()
    print(stdout)
    print(sid)
    # Sum the size of each 
    for line in stdout.split():
        vsize += int(line.strip())
    return vsize

#Sampling function using psutil
def measure_memory(pid):
    # Obtenir des informations sur l'utilisation de la mémoire du processus
    process = psutil.Process(pid)
    mem_info = process.memory_info()
    log("Process pid is : {}".format(pid))
    log("Process mem is : {}".format(mem_info))
    vms = mem_info.vms

    # List of all process forks
    forks = process.children(recursive=True)

    # For each fork, add its memory
    for fork in forks:
        fork_mem_info = fork.memory_info()
        log("Child pid is {}".format(fork.pid))
        log("Child mem is {}".format(fork_mem_info)) 
        vms += fork_mem_info.vms

    return vms

# Parent process infos
pid = os.getpid()
sid = os.getsid(pid)
pgid = os.getpgid(pid)
log("Pre-fork: PID is {} ; PGID is {} ; SID is {}".format(pid, pgid, sid))

# Starting time for execution time
if TIMER:
    startTime = time.time()

# Creating child process to execute child command
fork_pid = os.fork()

# We are in the child process
if fork_pid == 0:  
    # Setting up child process
    pid = os.getpid()
    sid = os.getsid(pid)
    pgid = os.getpgid(pid)
    log("Post-fork: PID is {} ; PGID is {} ; SID is {}".format(pid, pgid, sid))

    log("Trying to init our own session".format(pid, pgid))
    os.setsid()
    sid = os.getsid(pid)
    pgid = os.getpgid(pid)
    log("Post-session init: PID is {} ; PGID is {} ; SID is {}".format(pid, pgid, sid))
        
    log("Starting child: {}".format(child_args))
    proc = Popen(child_args, stdin=None, stdout=None, stderr=None, env=None, shell=True)

    # Logging peak memory usage 
    vmpeak = -1
    while proc.returncode == None:
        vmpeak = max(measure_memory(proc.pid), vmpeak)
        log("Waiting for child to exit. vmpeak={}".format(vmpeak))
        proc.poll()     # Check if child process has finished
        #time.sleep(0.1) # Time in seconds (float)
    
    out.write("memTool: vmpeak: {} \n".format(vmpeak))

    status = proc.returncode
    log("Child process returned {}".format(status))
    
    sys.exit(status)

# We are in parent process
else:
    # Wait for child process to finish
    (_fork_pid, full_status) = os.waitpid(fork_pid, 0)
    status = full_status >> 8
    log("Fork returned {}".format(status))
    if TIMER:
        executionTime = (time.time() - startTime)
        out.write("Execution time : {} s\n".format(executionTime))
    out.close()
    
    sys.exit(status)
